<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	 <!--配置spring的IOC，    -->
	<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>

	<!--spring中基于xml的AOP配置方式
	1、把通知bean交给spring进行管理
	2、使用aop:config标签表明开始aop的配置
	3、使用aop:aspect标签表明开始配置切面
		id:
			给切面提供一个唯一标示
		ref：
			指定通知类bean的id
	4、在aop:aspect标签内部使用对应标签来配置通知的类型
		让printLog方法在切入点方法执行之前执行，属于前置通知
			前置通知使用标签aop:before
				method：
					用于制定Logger类中哪个方法是前置通知
				pointCut：
					用于指定切入点表达式，就是指明要对业务层的哪些方法进行增强

					切入点表达式的写法：
						关键字：execution(表达式)
						表达式：
							访问修饰符 返回值 包名、包名、包名...类名.方法名(参数列表)
						标准的表达式写法：
							public void com.itheima.service.impl.AccountServiceImpl.saveAccount()

						全通配写法：
							* *..*.*(..)
						包名可以使用..表示当前包以及子包
						返回值、类名和方法名都可以使用*实现通配
						方法参数可以使用..表示有无参数均可，参数可以是任意类型
						通配包名的时候，有几级包就写几个*
							比如com.itheima.service.impl.
								*.*.*.*.
	-->

<!--	配置logger类-->
	<bean id="logger" class="com.itheima.utils.Logger"></bean>

<!--	配置AOP-->
	<aop:config>
<!--		通知方法的配置，以下配置表明通知方法printLog会在切入点方法，也就是accountService中
指定的方法执行之前被执行-->
		<aop:pointcut id="pt1" expression="execution(* *..*.*(..))"></aop:pointcut>
		<aop:aspect id="logAdvice" ref="logger">
<!--			配置通知的类型并建立通知方法和切入点方法的关联-->
<!--			<aop:before method="beforePrintLog" pointcut-ref="pt1"></aop:before>-->
<!--			<aop:after-returning method="afterReturningPrintLog" pointcut-ref="pt1"></aop:after-returning>-->
<!--			<aop:after-throwing method="afterThrowingPrintLog" pointcut-ref="pt1"></aop:after-throwing>-->
<!--			<aop:after method="afterPrintLog" pointcut-ref="pt1"></aop:after>-->

<!--			配置切入点表达式，id属性用于指定表达式的唯一标识，expression属性用于指定表达式内容
该标签主要用于减少重复代码

写在aop:aspect标签里面只对当前切面可用
写在外面可以对所有切面生效
写在外面的时候一定要写在aop:aspect标签的前面-->
<!--			<aop:pointcut id="pt1" expression="execution(* *..*.*(..))"></aop:pointcut>-->

<!--			详细注释参看Logger类内容-->
			<aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
		</aop:aspect>
	</aop:config>
</beans>